#include "include\common.hlsli"

struct PSInput
{
    float4 texCoord : SV_POSITION;
};

Texture2D positionGbuffer : register(t0);
Texture2D normalTexGbuffer : register(t1);

SamplerState samp : register(s0);

float4 PSMain(PSInput input) : SV_TARGET
{
    float3 position = positionGbuffer.Sample(samp, input.texCoord.xy).xyz;
	float3 normal = normalize(normalTexGbuffer.Sample(samp, input.texCoord.xy).xyz);
    
	float3 viewDir = normalize(proj.camPos - position);
	
	float ambientStrength = 0.1;
    float3 ambient = ambientStrength * float3(1,1,1);
  	
    // diffuse 
    float3 lightDir = float3(0,-1.0f,0);
    float diff = max(dot(normal, lightDir), 0.0);
    float3 diffuse = diff;
    
    // specular
    float specularStrength = 0.5;
    float3 reflectDir = reflect(-lightDir, normal);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    float3 specular = specularStrength * spec;  
        
    float3 result = (ambient + diffuse + specular);
	
    return float4(result, 1.0f);
}